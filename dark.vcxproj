<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="16.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{48DC8E00-CA44-3556-B08B-07F3E7864B58}</ProjectGuid>
    <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>
    <Keyword>Win32Proj</Keyword>
    <Platform>x64</Platform>
    <ProjectName>dark</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
    <VcpkgEnabled>false</VcpkgEnabled>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 10.1.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="do_not_import_user.props" Condition="exists('do_not_import_user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Code\github\darknet\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">dark.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">darkd</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Code\github\darknet\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">dark.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">dark</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Code\github\darknet\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">dark.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">dark</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Code\github\darknet\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">dark.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">dark</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.dll</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</GenerateManifest>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Debug/</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4013;4018;4028;4047;4068;4090;4101;4113;4133;4190;4244;4267;4305;4477;4996;4819</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FloatingPointModel>Fast</FloatingPointModel>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="Debug";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR=\"Debug\";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <CudaCompile>
      <Include>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(Include)</Include>
      <Defines>_WINDOWS;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="Debug";dark_EXPORTS;%(Defines)</Defines>
      <AdditionalOptions>%(AdditionalOptions) -Wno-deprecated-declarations -Xcompiler="/wd4013,/wd4018,/wd4028,/wd4047,/wd4068,/wd4090,/wd4101,/wd4113,/wd4133,/wd4190,/wd4244,/wd4267,/wd4305,/wd4477,/wd4996,/wd4819,/fp:fast,/DGPU,/DCUDNN,/DOPENCV /EHsc -Zi -Ob0"</AdditionalOptions>
      <CodeGeneration>compute_75,sm_75</CodeGeneration>
      <CompileOut>$(IntDir)%(Filename).obj</CompileOut>
      <GPUDebugInfo>false</GPUDebugInfo>
      <GenerateRelocatableDeviceCode>true</GenerateRelocatableDeviceCode>
      <Optimization>Od</Optimization>
      <Runtime>MDd</Runtime>
      <RuntimeChecks>RTC1</RuntimeChecks>
      <TargetMachinePlatform>64</TargetMachinePlatform>
      <TypeInfo>true</TypeInfo>
      <UseHostInclude>false</UseHostInclude>
      <Warning>W3</Warning>
    </CudaCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PostBuildEvent>
      <Message></Message>
      <Command>setlocal
powershell -noprofile -executionpolicy Bypass -file C:/Code/github/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Code/github/darknet/Debug/darkd.dll -installedDir C:/Code/github/vcpkg/installed/x64-windows/debug/bin -OutVariable out
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PostBuildEvent>
    <Link>
      <AdditionalDependencies>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64\cudnn.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudabgsegm343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudaobjdetect343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudastereo343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_ml343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_shape343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_stitching343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_superres343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_videostab343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\pthreadVC3d.lib;wsock32.lib;ws2_32.lib;C:\Program Files (x86)\ZED SDK\lib\sl_zed64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_input64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_core64.lib;curand.lib;cublas.lib;cuda.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudafeatures2d343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudacodec343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudaoptflow343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudalegacy343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_calib3d343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudawarping343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_features2d343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_flann343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_highgui343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_objdetect343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_photo343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudaimgproc343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudafilters343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudaarithm343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_video343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_videoio343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_imgcodecs343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_imgproc343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_core343d.lib;C:\Code\github\vcpkg\installed\x64-windows\debug\lib\opencv_cudev343d.lib;cudadevrt.lib;cudart_static.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64/$(Configuration);C:/Program Files (x86)/ZED SDK/lib;C:/Program Files (x86)/ZED SDK/lib/$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Code/github/darknet/Debug/darkd.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Code/github/darknet/Debug/darkd.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
    <CudaLink>
      <AdditionalOptions>-Wno-deprecated-gpu-targets</AdditionalOptions>
      <PerformDeviceLink>true</PerformDeviceLink>
    </CudaLink>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Release/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DisableSpecificWarnings>4013;4018;4028;4047;4068;4090;4101;4113;4133;4190;4244;4267;4305;4477;4996;4819</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FloatingPointModel>Fast</FloatingPointModel>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Full</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="Release";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR=\"Release\";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <CudaCompile>
      <Include>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(Include)</Include>
      <Defines>_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="Release";dark_EXPORTS;%(Defines)</Defines>
      <AdditionalOptions>%(AdditionalOptions) -Wno-deprecated-declarations -Xcompiler="/wd4013,/wd4018,/wd4028,/wd4047,/wd4068,/wd4090,/wd4101,/wd4113,/wd4133,/wd4190,/wd4244,/wd4267,/wd4305,/wd4477,/wd4996,/wd4819,/fp:fast,/DGPU,/DCUDNN,/DOPENCV /EHsc -Ob2"</AdditionalOptions>
      <CodeGeneration>compute_75,sm_75</CodeGeneration>
      <CompileOut>$(IntDir)%(Filename).obj</CompileOut>
      <GPUDebugInfo>false</GPUDebugInfo>
      <GenerateRelocatableDeviceCode>true</GenerateRelocatableDeviceCode>
      <Optimization>O2</Optimization>
      <Runtime>MD</Runtime>
      <TargetMachinePlatform>64</TargetMachinePlatform>
      <TypeInfo>true</TypeInfo>
      <UseHostInclude>false</UseHostInclude>
      <Warning>W3</Warning>
    </CudaCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PostBuildEvent>
      <Message></Message>
      <Command>setlocal
powershell -noprofile -executionpolicy Bypass -file C:/Code/github/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Code/github/darknet/Release/dark.dll -installedDir C:/Code/github/vcpkg/installed/x64-windows/bin -OutVariable out
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PostBuildEvent>
    <Link>
      <AdditionalDependencies>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64\cudnn.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudabgsegm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaobjdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudastereo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_ml343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_shape343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_stitching343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_superres343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videostab343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\pthreadVC3.lib;wsock32.lib;ws2_32.lib;C:\Program Files (x86)\ZED SDK\lib\sl_zed64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_input64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_core64.lib;curand.lib;cublas.lib;cuda.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafeatures2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudacodec343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaoptflow343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudalegacy343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_calib3d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudawarping343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_features2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_flann343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_highgui343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_objdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_photo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaimgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafilters343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaarithm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_video343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videoio343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgcodecs343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_core343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudev343.lib;cudadevrt.lib;cudart_static.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64/$(Configuration);C:/Program Files (x86)/ZED SDK/lib;C:/Program Files (x86)/ZED SDK/lib/$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Code/github/darknet/Release/dark.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Code/github/darknet/Release/dark.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
    <CudaLink>
      <AdditionalOptions>-Wno-deprecated-gpu-targets</AdditionalOptions>
      <PerformDeviceLink>true</PerformDeviceLink>
    </CudaLink>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>MinSizeRel/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DisableSpecificWarnings>4013;4018;4028;4047;4068;4090;4101;4113;4133;4190;4244;4267;4305;4477;4996;4819</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FloatingPointModel>Fast</FloatingPointModel>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="MinSizeRel";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR=\"MinSizeRel\";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <CudaCompile>
      <Include>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(Include)</Include>
      <Defines>_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="MinSizeRel";dark_EXPORTS;%(Defines)</Defines>
      <AdditionalOptions>%(AdditionalOptions) -Wno-deprecated-declarations -Xcompiler="/wd4013,/wd4018,/wd4028,/wd4047,/wd4068,/wd4090,/wd4101,/wd4113,/wd4133,/wd4190,/wd4244,/wd4267,/wd4305,/wd4477,/wd4996,/wd4819,/fp:fast,/DGPU,/DCUDNN,/DOPENCV /EHsc -Ob1"</AdditionalOptions>
      <CodeGeneration>compute_75,sm_75</CodeGeneration>
      <CompileOut>$(IntDir)%(Filename).obj</CompileOut>
      <GPUDebugInfo>false</GPUDebugInfo>
      <GenerateRelocatableDeviceCode>true</GenerateRelocatableDeviceCode>
      <Optimization>O1</Optimization>
      <Runtime>MD</Runtime>
      <TargetMachinePlatform>64</TargetMachinePlatform>
      <TypeInfo>true</TypeInfo>
      <UseHostInclude>false</UseHostInclude>
      <Warning>W3</Warning>
    </CudaCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PostBuildEvent>
      <Message></Message>
      <Command>setlocal
powershell -noprofile -executionpolicy Bypass -file C:/Code/github/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Code/github/darknet/MinSizeRel/dark.dll -installedDir C:/Code/github/vcpkg/installed/x64-windows/bin -OutVariable out
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PostBuildEvent>
    <Link>
      <AdditionalDependencies>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64\cudnn.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudabgsegm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaobjdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudastereo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_ml343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_shape343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_stitching343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_superres343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videostab343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\pthreadVC3.lib;wsock32.lib;ws2_32.lib;C:\Program Files (x86)\ZED SDK\lib\sl_zed64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_input64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_core64.lib;curand.lib;cublas.lib;cuda.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafeatures2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudacodec343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaoptflow343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudalegacy343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_calib3d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudawarping343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_features2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_flann343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_highgui343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_objdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_photo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaimgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafilters343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaarithm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_video343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videoio343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgcodecs343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_core343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudev343.lib;cudadevrt.lib;cudart_static.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64/$(Configuration);C:/Program Files (x86)/ZED SDK/lib;C:/Program Files (x86)/ZED SDK/lib/$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Code/github/darknet/MinSizeRel/dark.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Code/github/darknet/MinSizeRel/dark.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
    <CudaLink>
      <AdditionalOptions>-Wno-deprecated-gpu-targets</AdditionalOptions>
      <PerformDeviceLink>true</PerformDeviceLink>
    </CudaLink>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>RelWithDebInfo/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4013;4018;4028;4047;4068;4090;4101;4113;4133;4190;4244;4267;4305;4477;4996;4819</DisableSpecificWarnings>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FloatingPointModel>Fast</FloatingPointModel>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="RelWithDebInfo";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR=\"RelWithDebInfo\";dark_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <CudaCompile>
      <Include>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(Include)</Include>
      <Defines>_WINDOWS;NDEBUG;LIB_EXPORTS=1;USE_CMAKE_LIBS;CUDNN;CUDNN_HALF;OPENCV;_CRT_RAND_S;NOMINMAX;_USE_MATH_DEFINES;ZED_STEREO;GPU;OPENCV_TRAITS_ENABLE_DEPRECATED;CMAKE_INTDIR="RelWithDebInfo";dark_EXPORTS;%(Defines)</Defines>
      <AdditionalOptions>%(AdditionalOptions) -Wno-deprecated-declarations -Xcompiler="/wd4013,/wd4018,/wd4028,/wd4047,/wd4068,/wd4090,/wd4101,/wd4113,/wd4133,/wd4190,/wd4244,/wd4267,/wd4305,/wd4477,/wd4996,/wd4819,/fp:fast,/DGPU,/DCUDNN,/DOPENCV /EHsc -Zi -Ob1"</AdditionalOptions>
      <CodeGeneration>compute_75,sm_75</CodeGeneration>
      <CompileOut>$(IntDir)%(Filename).obj</CompileOut>
      <GPUDebugInfo>false</GPUDebugInfo>
      <GenerateRelocatableDeviceCode>true</GenerateRelocatableDeviceCode>
      <Optimization>O2</Optimization>
      <Runtime>MD</Runtime>
      <TargetMachinePlatform>64</TargetMachinePlatform>
      <TypeInfo>true</TypeInfo>
      <UseHostInclude>false</UseHostInclude>
      <Warning>W3</Warning>
    </CudaCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Program Files (x86)\ZED SDK\include;C:\Code\github\darknet\include;C:\Code\github\darknet\src;C:\Code\github\darknet\3rdparty\stb\include;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\include;C:\Code\github\vcpkg\installed\x64-windows\include;C:\Code\github\vcpkg\installed\x64-windows\include\opencv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <PostBuildEvent>
      <Message></Message>
      <Command>setlocal
powershell -noprofile -executionpolicy Bypass -file C:/Code/github/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Code/github/darknet/RelWithDebInfo/dark.dll -installedDir C:/Code/github/vcpkg/installed/x64-windows/bin -OutVariable out
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
    </PostBuildEvent>
    <Link>
      <AdditionalDependencies>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64\cudnn.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudabgsegm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaobjdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudastereo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_ml343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_shape343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_stitching343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_superres343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videostab343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\pthreadVC3.lib;wsock32.lib;ws2_32.lib;C:\Program Files (x86)\ZED SDK\lib\sl_zed64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_input64.lib;C:\Program Files (x86)\ZED SDK\lib\sl_core64.lib;curand.lib;cublas.lib;cuda.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafeatures2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudacodec343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaoptflow343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudalegacy343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_calib3d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudawarping343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_features2d343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_flann343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_highgui343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_objdetect343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_photo343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaimgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudafilters343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudaarithm343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_video343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_videoio343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgcodecs343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_imgproc343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_core343.lib;C:\Code\github\vcpkg\installed\x64-windows\lib\opencv_cudev343.lib;cudadevrt.lib;cudart_static.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.1/lib/x64/$(Configuration);C:/Program Files (x86)/ZED SDK/lib;C:/Program Files (x86)/ZED SDK/lib/$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Code/github/darknet/RelWithDebInfo/dark.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Code/github/darknet/RelWithDebInfo/dark.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
    <CudaLink>
      <AdditionalOptions>-Wno-deprecated-gpu-targets</AdditionalOptions>
      <PerformDeviceLink>true</PerformDeviceLink>
    </CudaLink>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="C:\Code\github\darknet\CMakeLists.txt">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule C:/Code/github/darknet/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Code/github/darknet -BC:/Code/github/darknet --check-stamp-file C:/Code/github/darknet/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCUDACompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;C:\Code\github\darknet\CMakeFiles\CheckCUDA\result.cmake;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.cpp;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.cpp;C:\Code\github\darknet\DarknetConfig.cmake.in;C:\Code\github\darknet\cmake\Modules\FindCUDNN.cmake;C:\Code\github\darknet\cmake\Modules\FindStb.cmake;C:\Code\github\darknet\detect_cuda_compute_capabilities.cu;C:\Code\github\darknet\src\version.h.in;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig-version.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-debug.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-release.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\pthreads_windows\vcpkg-cmake-wrapper.cmake;C:\Code\github\vcpkg\scripts\buildsystems\vcpkg.cmake;C:\Program Files (x86)\ZED SDK\zed-config-version.cmake;C:\Program Files (x86)\ZED SDK\zed-config.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\BasicConfigVersion-SameMajorVersion.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompilerABI.c;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompilerABI.cu;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDAInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompilerABI.cpp;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCompilerIdDetection.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompileFeatures.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerABI.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerId.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeFindBinUtils.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakePackageConfigHelpers.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitIncludeInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystem.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCompilerCommon.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckCSourceCompiles.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.c.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLanguage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLibraryExists.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ADSP-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMCC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\AppleClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Borland-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Bruce-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompilerInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Comeau-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Cray-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Embarcadero-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Fujitsu-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GHS-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IAR-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-C-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-CXX-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Intel-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\OpenWatcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PGI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PathScale-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SCO-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SDCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TinyCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Watcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CompilerId\VS-10.vcxproj.in;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA\select_compute_arch.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindOpenMP.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindThreads.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Internal\FeatureTesting.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-Determine-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\SelectLibraryConfigurations.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\WriteBasicConfigVersionFile.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Code\github\darknet\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule C:/Code/github/darknet/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Code/github/darknet -BC:/Code/github/darknet --check-stamp-file C:/Code/github/darknet/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCUDACompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;C:\Code\github\darknet\CMakeFiles\CheckCUDA\result.cmake;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.cpp;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.cpp;C:\Code\github\darknet\DarknetConfig.cmake.in;C:\Code\github\darknet\cmake\Modules\FindCUDNN.cmake;C:\Code\github\darknet\cmake\Modules\FindStb.cmake;C:\Code\github\darknet\detect_cuda_compute_capabilities.cu;C:\Code\github\darknet\src\version.h.in;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig-version.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-debug.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-release.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\pthreads_windows\vcpkg-cmake-wrapper.cmake;C:\Code\github\vcpkg\scripts\buildsystems\vcpkg.cmake;C:\Program Files (x86)\ZED SDK\zed-config-version.cmake;C:\Program Files (x86)\ZED SDK\zed-config.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\BasicConfigVersion-SameMajorVersion.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompilerABI.c;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompilerABI.cu;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDAInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompilerABI.cpp;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCompilerIdDetection.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompileFeatures.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerABI.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerId.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeFindBinUtils.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakePackageConfigHelpers.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitIncludeInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystem.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCompilerCommon.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckCSourceCompiles.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.c.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLanguage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLibraryExists.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ADSP-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMCC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\AppleClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Borland-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Bruce-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompilerInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Comeau-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Cray-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Embarcadero-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Fujitsu-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GHS-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IAR-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-C-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-CXX-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Intel-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\OpenWatcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PGI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PathScale-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SCO-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SDCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TinyCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Watcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CompilerId\VS-10.vcxproj.in;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA\select_compute_arch.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindOpenMP.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindThreads.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Internal\FeatureTesting.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-Determine-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\SelectLibraryConfigurations.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\WriteBasicConfigVersionFile.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Code\github\darknet\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule C:/Code/github/darknet/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Code/github/darknet -BC:/Code/github/darknet --check-stamp-file C:/Code/github/darknet/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCUDACompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;C:\Code\github\darknet\CMakeFiles\CheckCUDA\result.cmake;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.cpp;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.cpp;C:\Code\github\darknet\DarknetConfig.cmake.in;C:\Code\github\darknet\cmake\Modules\FindCUDNN.cmake;C:\Code\github\darknet\cmake\Modules\FindStb.cmake;C:\Code\github\darknet\detect_cuda_compute_capabilities.cu;C:\Code\github\darknet\src\version.h.in;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig-version.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-debug.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-release.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\pthreads_windows\vcpkg-cmake-wrapper.cmake;C:\Code\github\vcpkg\scripts\buildsystems\vcpkg.cmake;C:\Program Files (x86)\ZED SDK\zed-config-version.cmake;C:\Program Files (x86)\ZED SDK\zed-config.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\BasicConfigVersion-SameMajorVersion.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompilerABI.c;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompilerABI.cu;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDAInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompilerABI.cpp;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCompilerIdDetection.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompileFeatures.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerABI.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerId.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeFindBinUtils.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakePackageConfigHelpers.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitIncludeInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystem.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCompilerCommon.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckCSourceCompiles.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.c.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLanguage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLibraryExists.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ADSP-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMCC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\AppleClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Borland-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Bruce-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompilerInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Comeau-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Cray-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Embarcadero-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Fujitsu-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GHS-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IAR-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-C-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-CXX-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Intel-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\OpenWatcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PGI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PathScale-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SCO-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SDCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TinyCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Watcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CompilerId\VS-10.vcxproj.in;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA\select_compute_arch.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindOpenMP.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindThreads.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Internal\FeatureTesting.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-Determine-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\SelectLibraryConfigurations.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\WriteBasicConfigVersionFile.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Code\github\darknet\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule C:/Code/github/darknet/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Code/github/darknet -BC:/Code/github/darknet --check-stamp-file C:/Code/github/darknet/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCUDACompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;C:\Code\github\darknet\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;C:\Code\github\darknet\CMakeFiles\CheckCUDA\result.cmake;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPCheckVersion.cpp;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.c;C:\Code\github\darknet\CMakeFiles\FindOpenMP\OpenMPTryFlag.cpp;C:\Code\github\darknet\DarknetConfig.cmake.in;C:\Code\github\darknet\cmake\Modules\FindCUDNN.cmake;C:\Code\github\darknet\cmake\Modules\FindStb.cmake;C:\Code\github\darknet\detect_cuda_compute_capabilities.cu;C:\Code\github\darknet\src\version.h.in;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig-version.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVConfig.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-debug.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules-release.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\opencv\OpenCVModules.cmake;C:\Code\github\vcpkg\installed\x64-windows\share\pthreads_windows\vcpkg-cmake-wrapper.cmake;C:\Code\github\vcpkg\scripts\buildsystems\vcpkg.cmake;C:\Program Files (x86)\ZED SDK\zed-config-version.cmake;C:\Program Files (x86)\ZED SDK\zed-config.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\BasicConfigVersion-SameMajorVersion.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCCompilerABI.c;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDACompilerABI.cu;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCUDAInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXCompilerABI.cpp;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeCompilerIdDetection.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompileFeatures.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerABI.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineCompilerId.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeDetermineSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeFindBinUtils.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakePackageConfigHelpers.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitIncludeInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCCompiler.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystem.cmake.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCUDACompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCXXCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestCompilerCommon.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CMakeTestRCCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckCSourceCompiles.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.c.in;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckIncludeFile.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLanguage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CheckLibraryExists.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ADSP-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMCC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\ARMClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\AppleClang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Borland-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Bruce-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Clang-DetermineCompilerInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Comeau-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Compaq-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Cray-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Embarcadero-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Fujitsu-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GHS-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\GNU-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\HP-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IAR-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-C-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\IBMCPP-CXX-DetermineVersionInternal.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Intel-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\MSVC-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\NVIDIA-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\OpenWatcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PGI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\PathScale-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SCO-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SDCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\SunPro-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TI-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\TinyCC-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\VisualAge-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\Watcom-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XL-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\XLClang-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-C-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Compiler\zOS-CXX-DetermineCompiler.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\CompilerId\VS-10.vcxproj.in;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindCUDA\select_compute_arch.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindOpenMP.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindPackageMessage.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\FindThreads.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Internal\FeatureTesting.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-Determine-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows-NVIDIA-CUDA.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\SelectLibraryConfigurations.cmake;C:\Program Files\CMake\share\cmake-3.15\Modules\WriteBasicConfigVersionFile.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Code\github\darknet\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="C:\Code\github\darknet\include\yolo_v2_class.hpp" />
    <ClCompile Include="C:\Code\github\darknet\src\yolo_v2_class.cpp" />
    <ClCompile Include="C:\Code\github\darknet\src\activation_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\activations.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\art.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\avgpool_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\batchnorm_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\blas.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\box.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\captcha.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\cifar.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\classifier.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\coco.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\col2im.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\compare.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\connected_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\conv_lstm_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\convolutional_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\cost_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\cpu_gemm.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\crnn_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\crop_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\dark_cuda.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\data.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\deconvolutional_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\demo.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\detection_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\detector.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\dice.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\dropout_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\gemm.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\getopt.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\gettimeofday.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\go.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\gru_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\im2col.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\image.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\list.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\local_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\lstm_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\matrix.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\maxpool_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\network.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\nightmare.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\normalization_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\option_list.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\parser.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\region_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\reorg_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\reorg_old_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\rnn.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\rnn_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\rnn_vid.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\route_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\scale_channels_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\shortcut_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\softmax_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\super.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\swag.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\tag.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\tree.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\upsample_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\utils.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\voxel.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\writing.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\yolo.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\yolo_layer.c">
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">CompileAsC</CompileAs>
      <CompileAs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">CompileAsC</CompileAs>
    </ClCompile>
    <ClCompile Include="C:\Code\github\darknet\src\http_stream.cpp" />
    <ClCompile Include="C:\Code\github\darknet\src\image_opencv.cpp" />
    <ClInclude Include="C:\Code\github\darknet\src\activation_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\activations.h" />
    <ClInclude Include="C:\Code\github\darknet\src\avgpool_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\batchnorm_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\blas.h" />
    <ClInclude Include="C:\Code\github\darknet\src\box.h" />
    <ClInclude Include="C:\Code\github\darknet\src\classifier.h" />
    <ClInclude Include="C:\Code\github\darknet\src\col2im.h" />
    <ClInclude Include="C:\Code\github\darknet\src\connected_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\conv_lstm_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\convolutional_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\cost_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\crnn_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\crop_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\dark_cuda.h" />
    <ClInclude Include="C:\Code\github\darknet\src\darkunistd.h" />
    <ClInclude Include="C:\Code\github\darknet\src\data.h" />
    <ClInclude Include="C:\Code\github\darknet\src\deconvolutional_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\demo.h" />
    <ClInclude Include="C:\Code\github\darknet\src\detection_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\dropout_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\gemm.h" />
    <ClInclude Include="C:\Code\github\darknet\src\getopt.h" />
    <ClInclude Include="C:\Code\github\darknet\src\gettimeofday.h" />
    <ClInclude Include="C:\Code\github\darknet\src\gru_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\http_stream.h" />
    <ClInclude Include="C:\Code\github\darknet\src\im2col.h" />
    <ClInclude Include="C:\Code\github\darknet\src\image.h" />
    <ClInclude Include="C:\Code\github\darknet\src\image_opencv.h" />
    <ClInclude Include="C:\Code\github\darknet\src\layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\list.h" />
    <ClInclude Include="C:\Code\github\darknet\src\local_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\lstm_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\matrix.h" />
    <ClInclude Include="C:\Code\github\darknet\src\maxpool_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\network.h" />
    <ClInclude Include="C:\Code\github\darknet\src\normalization_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\option_list.h" />
    <ClInclude Include="C:\Code\github\darknet\src\parser.h" />
    <ClInclude Include="C:\Code\github\darknet\src\region_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\reorg_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\reorg_old_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\rnn_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\route_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\scale_channels_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\shortcut_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\softmax_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\tree.h" />
    <ClInclude Include="C:\Code\github\darknet\src\upsample_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\src\utils.h" />
    <ClInclude Include="C:\Code\github\darknet\src\version.h" />
    <ClInclude Include="C:\Code\github\darknet\src\yolo_layer.h" />
    <ClInclude Include="C:\Code\github\darknet\include\darknet.h" />
    <CudaCompile Include="src\activation_kernels.cu" />
    <CudaCompile Include="src\avgpool_layer_kernels.cu" />
    <CudaCompile Include="src\blas_kernels.cu" />
    <CudaCompile Include="src\col2im_kernels.cu" />
    <CudaCompile Include="src\convolutional_kernels.cu" />
    <CudaCompile Include="src\crop_layer_kernels.cu" />
    <CudaCompile Include="src\deconvolutional_kernels.cu" />
    <CudaCompile Include="src\dropout_layer_kernels.cu" />
    <CudaCompile Include="src\im2col_kernels.cu" />
    <CudaCompile Include="src\maxpool_layer_kernels.cu" />
    <CudaCompile Include="src\network_kernels.cu" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="C:\Code\github\darknet\ZERO_CHECK.vcxproj">
      <Project>{E110E1E7-CEFD-3EAF-B161-48C27EF187A7}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 10.1.targets" />
  </ImportGroup>
</Project>